{"version":3,"sources":["state_managment/Reducer.js","state_managment/GlobalState.js","components/TableHeader.js","components/TableBody.js","components/SearchBar.js","utils/useSearch.js","utils/useSort.js","utils/API.js","components/Table.js","components/Navbar.js","App.js","index.js"],"names":["Reducer","state","action","type","users","payload","Error","initialState","Context","createContext","Store","children","useReducer","dispatch","Provider","value","TableHeader","sort","onSortChange","sortTypes","className","onClick","icon","name","dob","TableBody","map","user","i","src","picture","medium","alt","first","last","cell","email","Date","date","toString","substr","SearchBar","handleInputChange","placeholder","onChange","useSearch","searchValue","useState","searchedUsers","setSearchedUsers","useEffect","undefined","results","filter","toLowerCase","includes","useSort","sortedUsers","setSortedUsers","a","b","console","log","API","getUsers","axios","get","Table","useContext","setUsers","search","setSearch","setSort","then","res","data","catch","err","up","faSortUp","down","faSortDown","default","faSort","event","target","nextSort","Navbar","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.69a1650a.chunk.js","sourcesContent":["function Reducer(state, action) {\n    switch (action.type) {\n        case 'set-users':\n            return {\n                users: action.payload\n            }\n        default:\n            throw new Error('Unexpeceted error thrown in src/state_managment/Reducer.js');\n    }\n}\n\nexport default Reducer;\n\n\n\n\n\n\n\n\n\n\n","import React, { createContext, useReducer } from \"react\";\nimport Reducer from './Reducer'\n\nconst initialState = { users: [] };\n\nconst Store = ({ children }) => {\n    const [state, dispatch] = useReducer(Reducer, initialState);\n    return (\n        <Context.Provider value={[state, dispatch]}>\n            {children}\n        </Context.Provider>\n    )\n};\n\nexport const Context = createContext(initialState);\nexport default Store;","import { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport './fontawesome.css'\n\n// We are accepting as props from the Table component the sort state, the onSortChange event handler, and the sortTypes for the fontawesome icons\nconst TableHeader = ({ sort, onSortChange, sortTypes }) => {\n    return (\n        <thead className=\"bg-dark\">\n            <tr className=\"text-light\">\n                <th> Photo </th>\n                <th>Name\n                <button onClick={() => onSortChange('name')}>\n                        <FontAwesomeIcon className=\"fa\" icon={sortTypes[sort.name]} />\n                    </button>\n                </th>\n                <th>Phone</th>\n                <th>Email</th>\n                <th>DOB\n                <button onClick={() => onSortChange('dob')}>\n                        <FontAwesomeIcon className=\"fa\" icon={sortTypes[sort.dob]} />\n                    </button>\n                </th>\n            </tr>\n        </thead>\n    );\n}\n\nexport default TableHeader;","// this is just the component that takes in the user state from the table component, and displays the users accordinly\nconst TableBody = ({users}) => {\n    return (\n        <tbody>\n            {users.map((user, i) => {\n                return (\n                    <tr key={i}>\n                        <th><img src={user.picture.medium} alt=\"\"></img></th>\n                        <th>{user.name.first} {user.name.last}</th>\n                        <th>{user.cell}</th>\n                        <th>{user.email}</th>\n                        <th>{new Date(user.dob.date).toString().substr(4, 11)}</th>\n                    </tr>\n                )\n            })}\n        </tbody>\n    )\n}\n\nexport default TableBody;\n\n","const SearchBar = ({ handleInputChange }) => {\n    return (\n        <div className='float-right pr-3 py-2 mr-3'>\n            <input\n                className=\"form-control\"\n                type=\"search\"\n                placeholder=\"Search\"\n                onChange={handleInputChange}\n            />\n        </div>\n    );\n}\n\nexport default SearchBar;\n","import { useEffect, useState } from 'react';\n\n// Accepting a duplicate of the imutable users array, and the search state for running the filter params on the array of users\nconst useSearch = (users, searchValue) => {\n    // Of course, setting local state, as you do with hooks\n    const [searchedUsers, setSearchedUsers] = useState('');\n\n    useEffect(() => {\n        // Imediately, if the searchvalue is anything less than one character, there is no point in filtering the array\n        if (searchValue === undefined) return\n\n        // Simple filter by name\n        const results = users.filter(user => {\n            const searchCredentials = user.name.first.toLowerCase() + user.name.last.toLowerCase() + user.email.toLowerCase();\n            return searchCredentials.includes(searchValue.toLowerCase())\n        })\n        setSearchedUsers(results)\n    }, [users, searchValue])\n\n    return searchedUsers\n}\n\nexport default useSearch;","import { useState, useEffect } from 'react';\n\n// Taking in as args, a duplicate of the imutable array of users, and the sort state for determining how to sort the array of users\nconst useSort = (users, sort) => {\n    // Setting local state for the ease of returning a value from this hook\n    const [sortedUsers, setSortedUsers] = useState([]);\n\n    useEffect(() => {\n\n        if (sort.name === 'default' && sort.dob === 'default') {\n            // if we are in default, we don't want to apply any sorting to the users list\n            setSortedUsers(undefined)\n        }\n        // Then we just else if the rest of the possibilities and return the accordingly sorted array of users\n        else if (sort.name === 'up' && sort.dob === 'default') {\n            setSortedUsers(users.sort((a, b) => {\n                if (a.name.last < b.name.last) { return 1; }\n                return -1\n            }))\n        } else if (sort.name === 'down' && sort.dob === 'default') {\n            setSortedUsers(users.sort((a, b) => {\n                if (a.name.last < b.name.last) { return -1; }\n                return 1\n            }))\n        } else if (sort.dob === 'up' && sort.name === 'default') {\n            console.log('dob up')\n            setSortedUsers(users.sort((a, b) => {\n                if (a.dob.date < b.dob.date) { return -1; }\n                return 1\n            }))\n        } else if (sort.dob === 'down' && sort.name === 'default') {\n            console.log('dob down')\n            setSortedUsers(users.sort((a, b) => {\n                if (a.dob.date < b.dob.date) { return 1; }\n                return -1\n            }))\n        }\n    }, [sort, setSortedUsers, users])\n\n    return sortedUsers\n}\n\n\nexport default useSort;\n","import axios from \"axios\";\n\nconst API = {\n  getUsers: function () {\n    return axios.get(\"https://randomuser.me/api/?results=100\");\n  }\n};\n\nexport default API;","import { useContext, useEffect, useState } from 'react'\nimport { faSortDown, faSortUp, faSort } from '@fortawesome/free-solid-svg-icons'\nimport { Context } from '../state_managment/GlobalState';\nimport TableHeader from \"./TableHeader\"\nimport TableBody from './TableBody';\nimport SearchBar from './SearchBar';\nimport useSearch from '../utils/useSearch';\nimport useSort from '../utils/useSort';\nimport API from \"../utils/API\"\n\nconst Table = () => {\n    // Using context to store the root list of user data, so that we always have an immutable source to fall back on\n    const [state, dispatch] = useContext(Context);\n    // Then setting up the component state for users, this is what we will use to render the users data\n    const [users, setUsers] = useState([]);\n    // State variables for the value of the search box\n    const [search, setSearch] = useState(undefined);\n    // State variable for the sort buttons\n    const [sort, setSort] = useState({\n        name: 'default',\n        dob: 'default'\n    });\n    // Initially calling the api to set the root state of the users\n    useEffect(\n        () => {\n            API.getUsers()\n                .then(res => {\n                    dispatch({ type: 'set-users', payload: res.data.results });\n                })\n                .catch(err => console.log(err));\n        }, [dispatch]);\n    // Then seting the local state for rendering\n    useEffect(() => {\n        setUsers(state.users)\n    }, [state])\n\n    // setting up a variable to control the icons displayed next to the column you are sorting by\n    const sortTypes = {\n        up: faSortUp,\n        down: faSortDown,\n        default: faSort,\n    }\n\n    // Function that handles the state of the search box. \n    const handleInputChange = event => {\n        setSearch(event.target.value);\n    };\n\n    // Function that handles the toggling of the column sorting\n    const onSortChange = (type) => {\n        let nextSort;\n        // Check first to see which value the user is sorting for and then if/else to set the value of the sort icon/state\n        switch (type) {\n            case 'name':\n                if (sort.name === 'down') nextSort = 'up';\n                else if (sort.name === 'up') nextSort = 'default';\n                else if (sort.name === 'default') nextSort = 'down';\n                setSort({\n                    name: nextSort,\n                    dob: 'default'\n                });\n                break;\n            case 'dob':\n                if (sort.dob === 'down') nextSort = 'up';\n                else if (sort.dob === 'up') nextSort = 'default';\n                else if (sort.dob === 'default') nextSort = 'down';\n                setSort({\n                    name: 'default',\n                    dob: nextSort\n                });\n                break;\n            default:\n                throw new Error(\"unexpected Error in onSortChange() switch case. Table.js 87\");\n        }\n    }\n\n    // setting up the user sets we are going to listen to in our useEffects to display the data you want! \n    // These are both custom hooks\n    let searchedUsers = useSearch([...state.users], search)\n    let sortedUsers = useSort([...state.users], sort)\n\n    // This useEffect handles filtering the array of users based on your search input \n    // Note that is sets sort to {all: default} so that no weird state issues happen (searching and filtering at the same time)\n    useEffect(() => {\n        if (!searchedUsers) return;\n        setSort({\n            name: 'default',\n            dob: 'default'\n        })\n        setUsers(searchedUsers)\n    }, [searchedUsers])\n\n    // This useEffect handles the sorting of the users array based on the sort state\n    // Note when both sort values are 'default' sortedUsers comes back undefined, and we fall back on our GlobalState to restore the list to normal\n    useEffect(() => {\n        if (sortedUsers === undefined) {\n            setUsers(state.users);\n            return;\n        } else {\n            setUsers(sortedUsers)\n        };\n    }, [sortedUsers, state.users])\n\n\n    return (\n        <div className=\"px-5 mx-5\">\n            <SearchBar handleInputChange={handleInputChange} />\n            <table className=\"table table-striped\">\n                <TableHeader sort={sort} onSortChange={onSortChange} sortTypes={sortTypes} />\n                <TableBody sort={sort} users={users} />\n            </table>\n        </div>\n    );\n}\n\nexport default Table;\n","const Navbar = () => {\n    return (\n        <nav className=\"navbar navbar-dark bg-dark\">\n            <span className=\"navbar-brand mb-0 h1\">Embloyee Directory</span>\n        </nav>\n    );\n}\n\nexport default Navbar;\n","import React from 'react';\nimport Provider from './state_managment/GlobalState';\nimport Table from './components/Table'\nimport Navbar from './components/Navbar'\n\nconst App = () => {\n    return (\n        <Provider>\n            <Navbar />\n            <Table />\n        </Provider>\n    );\n}\n\nexport default App;\n","import 'bootstrap/dist/css/bootstrap.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n    <React.StrictMode>\n            <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);"],"sourceRoot":""}